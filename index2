<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Interactive - Buttons fix</title>
  <style>
    body { font-family: Inter, system-ui, Arial; padding: 20px; max-width: 900px; margin: auto; }
    .row { display:flex; gap:12px; align-items:center; margin-bottom:12px; }
    label { min-width:120px; }
    input[type="number"]{width:140px;padding:6px}
    button { padding:8px 12px; cursor:pointer; }
    textarea { width:100%; height:140px; }
    .result { background:#f5f7ff; padding:12px; border-radius:8px; margin-top:12px; }
  </style>
</head>
<body>
  <h1>Demo â€” boutons fonctionnels</h1>

  <div>
    <div class="row">
      <label for="tjm">TJM (HT) :</label>
      <input id="tjm" type="number" value="100" min="0" step="1">
      <label for="days" style="margin-left:8px">Jours :</label>
      <input id="days" type="number" value="1" min="0" step="1">
      <label style="margin-left:8px">TVA :</label>
      <input id="vatEnabled" type="checkbox">
    </div>

    <div class="row">
      <button id="btnCalculate" type="button">Calculer</button>
      <button id="btnReset" type="button">RÃ©initialiser</button>
      <button id="btnDownload" type="button">ðŸ’¾ TÃ©lÃ©charger JSON</button>
      <label for="fileInput" style="margin-left:8px">
        <button id="btnUpload" type="button">ðŸ“‚ Importer JSON</button>
      </label>
      <input id="fileInput" type="file" accept="application/json" style="display:none">
    </div>

    <div class="result" id="resultBox" aria-live="polite">
      <div>CA HT: <strong id="caHT">0 â‚¬</strong></div>
      <div>TVA (si activÃ©e): <strong id="vatAmount">0 â‚¬</strong></div>
      <div>CA TTC: <strong id="caTTC">0 â‚¬</strong></div>
    </div>

    <h3 style="margin-top:18px">JSON (aperÃ§u)</h3>
    <textarea id="jsonPreview" readonly></textarea>
  </div>

  <script>
    // Ã‰lÃ©ments DOM
    const tjm = document.getElementById('tjm');
    const days = document.getElementById('days');
    const vatEnabled = document.getElementById('vatEnabled');

    const btnCalculate = document.getElementById('btnCalculate');
    const btnReset = document.getElementById('btnReset');
    const btnDownload = document.getElementById('btnDownload');
    const btnUpload = document.getElementById('btnUpload');
    const fileInput = document.getElementById('fileInput');

    const caHTEl = document.getElementById('caHT');
    const vatAmountEl = document.getElementById('vatAmount');
    const caTTCEl = document.getElementById('caTTC');
    const jsonPreview = document.getElementById('jsonPreview');

    const VAT_RATE = 0.20;

    // Calculs (TJM SAISI = HT fixe)
    function computeValues() {
      const tjmHT = Number(tjm.value) || 0;
      const nbDays = Number(days.value) || 0;

      const caHT = tjmHT * nbDays;
      const vatAmount = vatEnabled.checked ? caHT * VAT_RATE : 0;
      const caTTC = caHT + vatAmount;

      // affichage
      caHTEl.textContent = caHT.toLocaleString('fr-FR', {style:'currency', currency:'EUR'});
      vatAmountEl.textContent = vatAmount.toLocaleString('fr-FR', {style:'currency', currency:'EUR'});
      caTTCEl.textContent = caTTC.toLocaleString('fr-FR', {style:'currency', currency:'EUR'});

      // JSON aperÃ§u
      const payload = {
        tjmHT: tjmHT,
        days: nbDays,
        vatEnabled: !!vatEnabled.checked,
        vatRate: VAT_RATE,
        caHT, vatAmount, caTTC,
        timestamp: new Date().toISOString()
      };
      jsonPreview.value = JSON.stringify(payload, null, 2);
      return payload;
    }

    // TÃ©lÃ©chargement JSON
    function saveToFile() {
      const payload = computeValues();
      const blob = new Blob([JSON.stringify(payload, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `simulation_${new Date().toISOString().slice(0,19).replace(/[:T]/g,'-')}.json`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    }

    // Chargement JSON (import)
    function loadFromFile(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target.result);
          // appliquer les valeurs (prudence : validation minimale)
          if (typeof data.tjmHT === 'number') tjm.value = data.tjmHT;
          if (typeof data.days === 'number') days.value = data.days;
          if (typeof data.vatEnabled === 'boolean') vatEnabled.checked = data.vatEnabled;
          // recalculer et afficher
          computeValues();
        } catch (err) {
          alert('Fichier JSON invalide : ' + err.message);
        }
      };
      reader.readAsText(file);
    }

    // Reset
    function resetForm() {
      tjm.value = 100;
      days.value = 1;
      vatEnabled.checked = false;
      computeValues();
    }

    // Event listeners
    function attachEventListeners() {
      btnCalculate.addEventListener('click', computeValues);
      btnReset.addEventListener('click', resetForm);
      btnDownload.addEventListener('click', saveToFile);

      // upload via hidden file input
      btnUpload.addEventListener('click', () => fileInput.click());
      fileInput.addEventListener('change', (ev) => {
        const f = ev.target.files && ev.target.files[0];
        if (f) loadFromFile(f);
        // clear selection so same file can be uploaded again
        fileInput.value = '';
      });

      // recalcul live when inputs change
      [tjm, days, vatEnabled].forEach(el => el.addEventListener('input', computeValues));
    }

    // Initialisation
    window.addEventListener('DOMContentLoaded', () => {
      attachEventListeners();
      computeValues();
    });
  </script>
</body>
</html>
